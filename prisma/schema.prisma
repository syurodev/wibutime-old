// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum ContentStatus {
  Pause
  Complete
  InProcess
}

// USER
model User {
  id                 String    @id @default(cuid())
  name               String    @db.Text
  username           String?   @unique
  image              String?   @db.Text
  description        Json?     @db.Json
  email              String?   @unique
  phone              String?   @unique
  hashedPassword     String?   @db.Text
  emailVerified      Boolean?  @db.Boolean
  phoneVerified      Boolean?  @db.Boolean
  roleId             String?   @db.Text
  accounts           Account[]
  createdAt          DateTime  @default(now())
  translationGroupId String?   @db.Text

  translationGroups TranslationGroupMembers[]
  lightnovels       Lightnovel[]
  animes            Anime[]
  mangas            Manga[]
  rating            Rating[]
  comments          Comment[]
  favorites         Favorite[]

  role Role? @relation(fields: [roleId], references: [id])
}

model TranslationGroupMembers {
  userId             String
  translationGroupId String
  role               String

  user             User             @relation(fields: [userId], references: [id])
  translationGroup TranslationGroup @relation(fields: [translationGroupId], references: [id])

  @@id([userId, translationGroupId])
}

model TranslationGroup {
  id          String @id @default(cuid())
  description Json?  @db.Json
  image       Json?
  name        String

  lightnovels Lightnovel[]
  animes      Anime[]
  mangas      Manga[]
  members     TranslationGroupMembers[]
}

model Favorite {
  id            String   @id @default(cuid())
  userId        String   @db.Text
  lightnovelIds String[]
  animeIds      String[]
  mangaIds      String[]

  user        User         @relation(fields: [userId], references: [id])
  // lightnovels Lightnovel[] @relation(fields: [lightnovelIds], references: [id])
  // animes      Anime[]      @relation(fields: [animeIds], references: [id])
  // mangas      Manga[]      @relation(fields: [mangaIds], references: [id])
  lightnovels Lightnovel[]
  animes      Anime[]
  mangas      Manga[]
}

// ROLE
model Role {
  id   String @id @default(cuid())
  name String @db.Text

  users User[]

  permissions Permission[]
}

// PERMISSION
model Permission {
  id   String @id @default(cuid())
  name String

  roles Role[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String   @db.Text
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model ResetPasswordToken {
  id      String   @id @default(cuid())
  email   String   @db.Text
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model Lightnovel {
  id         String        @id @default(cuid())
  name       String        @db.Text
  otherNames String[]      @default([])
  author     String?       @db.Text
  artist     String?       @default("")
  image      Json?         @db.Json
  summary    Json          @db.Json
  createdAt  DateTime      @default(now())
  updateAt   DateTime      @updatedAt
  deleted    Boolean       @default(false)
  status     ContentStatus @default(InProcess)
  note       Json?         @db.Json

  userId             String             @db.Text
  translationGroupId String?            @db.Text
  volumes            LightnovelVolume[]
  rating             Rating[]
  favorites          Favorite[]
  categories         Category[]

  user             User              @relation(fields: [userId], references: [id])
  translationGroup TranslationGroup? @relation(fields: [translationGroupId], references: [id])

  @@index([name])
}

model LightnovelVolume {
  id        String   @id @default(cuid())
  name      String   @db.Text
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
  deleted   Boolean  @default(false)
  image     Json?    @db.Json

  novelId  String              @db.Text
  chapters LightnovelChapter[]

  novel Lightnovel @relation(fields: [novelId], references: [id], onDelete: Cascade)
}

model LightnovelChapter {
  id        String    @id @default(cuid())
  name      String    @db.Text
  content   Json      @db.Json
  createdAt DateTime  @default(now())
  updateAt  DateTime  @updatedAt
  deleted   Boolean   @default(false)
  viewed    Int       @default(0)
  words     Int       @default(0)
  viewedAt  DateTime? @db.Date

  volumeId String    @db.Text
  comments Comment[]

  volume LightnovelVolume @relation(fields: [volumeId], references: [id], onDelete: Cascade)
}

//TODO: ANIME
model Anime {
  id        String        @id @default(cuid())
  name      String        @db.Text
  createdAt DateTime      @default(now())
  updateAt  DateTime      @updatedAt
  deleted   Boolean       @default(false)
  image     Json?         @db.Json
  summary   Json          @db.Json
  status    ContentStatus @default(InProcess)
  note      Json?         @db.Json

  translationGroupId String?           @db.Text
  userId             String            @db.Text
  seasons            AnimeSeason[]
  rating             Rating[]
  // favorites  Favorite[] @relation(fields: [favoriteIds], references: [id])
  // categories Category[] @relation(fields: [categoryIds], references: [id])
  favorites          Favorite[]
  categories         Category[]
  user               User              @relation(fields: [userId], references: [id])
  translationGroup   TranslationGroup? @relation(fields: [translationGroupId], references: [id])

  @@index([name])
}

model AnimeSeason {
  id        String   @id @default(cuid())
  name      String   @db.Text
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
  deleted   Boolean  @default(false)
  viewed    Int      @default(0)
  image     Json?    @db.Json

  animeId  String         @db.Text
  episodes AnimeEpisode[]

  anime Anime @relation(fields: [animeId], references: [id], onDelete: Cascade)
}

model AnimeEpisode {
  id        String    @id @default(cuid())
  url       String    @db.Text
  createdAt DateTime  @default(now())
  updateAt  DateTime  @updatedAt
  deleted   Boolean   @default(false)
  viewed    Int       @default(0)
  index     String    @db.Text
  viewedAt  DateTime? @db.Date

  seasonId String    @db.Text
  comments Comment[]

  season AnimeSeason @relation(fields: [seasonId], references: [id], onDelete: Cascade)
}

//TODO: MANGA
model Manga {
  id                 String        @id @default(cuid())
  name               String        @db.Text
  createdAt          DateTime      @default(now())
  updateAt           DateTime      @updatedAt
  deleted            Boolean       @default(false)
  image              Json?         @db.Json
  status             ContentStatus @default(InProcess)
  userId             String        @db.Text
  seasons            MangaSeason[]
  rating             Rating[]
  note               Json?         @db.Json
  summary            Json          @db.Json
  translationGroupId String?       @db.Text

  // favorites  Favorite[] @relation(fields: [favoriteIds], references: [id])
  // categories Category[] @relation(fields: [categoryIds], references: [id])
  favorites        Favorite[]
  categories       Category[]
  user             User              @relation(fields: [userId], references: [id])
  translationGroup TranslationGroup? @relation(fields: [translationGroupId], references: [id])

  @@index([name])
}

model MangaSeason {
  id        String   @id @default(cuid())
  name      String   @db.Text
  image     Json?    @db.Json
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
  deleted   Boolean  @default(false)

  mangaId  String         @db.Text
  chapters MangaChapter[]

  manga Manga @relation(fields: [mangaId], references: [id], onDelete: Cascade)
}

model MangaChapter {
  id        String    @id @default(cuid())
  url       String[]
  createdAt DateTime  @default(now())
  updateAt  DateTime  @updatedAt
  deleted   Boolean   @default(false)
  viewed    Int       @default(0)
  index     String    @db.Text
  viewedAt  DateTime? @db.Date

  seasonId String    @db.Text
  comments Comment[]

  season MangaSeason @relation(fields: [seasonId], references: [id], onDelete: Cascade)
}

model Category {
  id      String  @id @default(cuid())
  name    String  @unique
  deleted Boolean @default(false)

  mangas      Manga[]
  animes      Anime[]
  lightnovels Lightnovel[]
}

model Comment {
  id       String   @id @default(cuid())
  comment  String   @db.Text
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  deleted  Boolean  @default(false)

  userId       String  @db.Text
  lightnovelId String? @db.Text
  animeId      String? @db.Text
  mangaId      String? @db.Text

  user       User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  lightnovel LightnovelChapter? @relation(fields: [lightnovelId], references: [id], onDelete: Cascade)
  anime      AnimeEpisode?      @relation(fields: [animeId], references: [id], onDelete: Cascade)
  manga      MangaChapter?      @relation(fields: [mangaId], references: [id], onDelete: Cascade)
}

model Rating {
  id    String @id @default(cuid())
  score Int

  userId       String
  lightnovelId String? @db.Text
  animeId      String? @db.Text
  mangaId      String? @db.Text

  lightnovel Lightnovel? @relation(fields: [lightnovelId], references: [id], onDelete: Cascade)
  anime      Anime?      @relation(fields: [animeId], references: [id], onDelete: Cascade)
  manga      Manga?      @relation(fields: [mangaId], references: [id], onDelete: Cascade)
  user       User        @relation(fields: [userId], references: [id])
}
