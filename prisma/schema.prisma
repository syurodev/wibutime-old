// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// USER
model User {
  id             String    @id @default(cuid())
  name           String    @db.Text
  username       String?   @unique
  image          String?   @db.Text
  coverImage     Json?     @db.Json
  description    String?   @db.Text
  email          String?   @unique
  phone          String?   @unique
  hashedPassword String?   @db.Text
  emailVerified  Boolean?  @db.Boolean
  phoneVerified  Boolean?  @db.Boolean
  roleId         String    @db.Text
  accounts       Account[]
  createdAt      DateTime  @default(now())

  role        Role         @relation(fields: [roleId], references: [id])
  lightnovels Lightnovel[]
  animes      Anime[]
  mangas      Manga[]
  comments    Comment[]
  favorites   Favorite[]
}

model Favorite {
  id            String   @id @default(cuid())
  userId        String   @db.Text
  lightnovelIds String[]
  animeIds      String[]
  mangaIds      String[]

  user        User         @relation(fields: [userId], references: [id])
  // lightnovels Lightnovel[] @relation(fields: [lightnovelIds], references: [id])
  // animes      Anime[]      @relation(fields: [animeIds], references: [id])
  // mangas      Manga[]      @relation(fields: [mangaIds], references: [id])
  lightnovels Lightnovel[]
  animes      Anime[]
  mangas      Manga[]
}

// ROLE
model Role {
  id   String @id @default(cuid())
  name String @db.Text

  users         User[]
  permissionIds String[]

  // permissions Permission[] @relation(fields: [permissionIds], references: [id])
  permissions Permission[]
}

// PERMISSION
model Permission {
  id   String @id @default(cuid())
  name String

  roleIds String[]

  // roles Role[] @relation(fields: [roleIds], references: [id])
  roles Role[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String   @db.Text
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model ResetPasswordToken {
  id      String   @id @default(cuid())
  email   String   @db.Text
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model Lightnovel {
  id         String   @id @default(cuid())
  name       String   @db.Text
  otherNames String[] @default([])
  author     String?  @db.Text
  artist     String?  @default("")
  image      Json?    @db.Json
  coverImage Json?    @db.Json
  summary    String   @db.Text
  createdAt  DateTime @default(now())
  updateAt   DateTime @updatedAt
  deleted    Boolean  @default(false)

  userId      String              @db.Text
  chapters    LightnovelChapter[]
  categoryIds String[]
  favoriteIds String[]

  // favorites  Favorite[] @relation(fields: [favoriteIds], references: [id])
  // categories Category[] @relation(fields: [categoryIds], references: [id])
  favorites  Favorite[]
  categories Category[]
  user       User       @relation(fields: [userId], references: [id])

  @@index([name])
}

model LightnovelChapter {
  id        String   @id @default(cuid())
  name      String   @db.Text
  content   Json     @db.Json
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
  deleted   Boolean  @default(false)
  viewed    Int      @default(0)

  novelId  String    @db.Text
  comments Comment[]

  novel Lightnovel @relation(fields: [novelId], references: [id])
}

//TODO: ANIME
model Anime {
  id         String   @id @default(cuid())
  name       String   @db.Text
  createdAt  DateTime @default(now())
  updateAt   DateTime @updatedAt
  deleted    Boolean  @default(false)
  image      Json?    @db.Json
  coverImage Json?    @db.Json

  userId      String         @db.Text
  episodes    AnimeEpisode[]
  categoryIds String[]
  favoriteIds String[]

  // favorites  Favorite[] @relation(fields: [favoriteIds], references: [id])
  // categories Category[] @relation(fields: [categoryIds], references: [id])
  favorites  Favorite[]
  categories Category[]
  user       User       @relation(fields: [userId], references: [id])

  @@index([name])
}

model AnimeEpisode {
  id        String   @id @default(cuid())
  url       String   @db.Text
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
  deleted   Boolean  @default(false)
  viewed    Int      @default(0)

  animeId  String    @db.Text
  comments Comment[]

  anime Anime @relation(fields: [animeId], references: [id])
}

//TODO: MANGA
model Manga {
  id         String   @id @default(cuid())
  name       String   @db.Text
  createdAt  DateTime @default(now())
  updateAt   DateTime @updatedAt
  deleted    Boolean  @default(false)
  image      Json?    @db.Json
  coverImage Json?    @db.Json

  favoriteIds String[]
  userId      String         @db.Text
  chapters    MangaChapter[]
  categoryIds String[]

  // favorites  Favorite[] @relation(fields: [favoriteIds], references: [id])
  // categories Category[] @relation(fields: [categoryIds], references: [id])
  favorites  Favorite[]
  categories Category[]
  user       User       @relation(fields: [userId], references: [id])

  @@index([name])
}

model MangaChapter {
  id        String   @id @default(cuid())
  url       String[]
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
  deleted   Boolean  @default(false)
  viewed    Int      @default(0)

  mangaId  String    @db.Text
  comments Comment[]

  manga Manga @relation(fields: [mangaId], references: [id])
}

model Category {
  id      String  @id @default(cuid())
  name    String  @unique
  deleted Boolean @default(false)

  mangaIds      String[]
  animeIds      String[]
  lightnovelIds String[]

  // mangas      Manga[]      @relation(fields: [mangaIds], references: [id])
  // animes      Anime[]      @relation(fields: [animeIds], references: [id])
  // lightnovels Lightnovel[] @relation(fields: [lightnovelIds], references: [id])
  mangas      Manga[]
  animes      Anime[]
  lightnovels Lightnovel[]
}

model Comment {
  id       String   @id @default(cuid())
  comment  String   @db.Text
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  deleted  Boolean  @default(false)

  userId       String  @db.Text
  lightnovelId String? @db.Text
  animeId      String? @db.Text
  mangaId      String? @db.Text

  user       User               @relation(fields: [userId], references: [id])
  lightnovel LightnovelChapter? @relation(fields: [lightnovelId], references: [id])
  anime      AnimeEpisode?      @relation(fields: [animeId], references: [id])
  manga      MangaChapter?      @relation(fields: [mangaId], references: [id])
}
