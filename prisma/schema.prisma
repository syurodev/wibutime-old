// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum ContentStatus {
  Pause
  Complete
  InProcess
}

// USER
model user {
  id                   String    @id @default(cuid())
  name                 String    @db.Text
  username             String?   @unique
  image                String?   @db.Text
  description          Json?     @db.Json
  email                String?   @unique
  phone                String?   @unique
  hashed_password      String?   @db.Text
  emailVerified        Boolean?  @db.Boolean
  phoneVerified        Boolean?  @db.Boolean
  role_id              String?   @db.Text
  accounts             Account[]
  created_at           DateTime  @default(now())
  translation_group_id String?   @db.Text

  translation_groups translation_group_members[]
  lightnovels        lightnovel[]
  animes             anime[]
  mangas             manga[]
  rating             rating[]
  comments           comment[]
  favorites          favorite[]

  role role? @relation(fields: [role_id], references: [id])
}

model translation_group_members {
  user_id              String
  translation_group_id String
  role                 String

  user              user              @relation(fields: [user_id], references: [id])
  translation_group translation_group @relation(fields: [translation_group_id], references: [id])

  @@id([user_id, translation_group_id])
}

model translation_group {
  id          String @id @default(cuid())
  description Json?  @db.Json
  image       Json?
  name        String

  lightnovels lightnovel[]
  animes      anime[]
  mangas      manga[]
  members     translation_group_members[]
}

model favorite {
  id             String   @id @default(cuid())
  user_id        String   @db.Text
  lightnovel_ids String[]
  anime_ids      String[]
  manga_ids      String[]

  user        user         @relation(fields: [user_id], references: [id])
  // lightnovels Lightnovel[] @relation(fields: [lightnovelIds], references: [id])
  // animes      Anime[]      @relation(fields: [animeIds], references: [id])
  // mangas      Manga[]      @relation(fields: [mangaIds], references: [id])
  lightnovels lightnovel[]
  animes      anime[]
  mangas      manga[]
}

// ROLE
model role {
  id   String @id @default(cuid())
  name String @db.Text

  users user[]

  permissions permission[]
}

// PERMISSION
model permission {
  id   String @id @default(cuid())
  name String

  roles role[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user user @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model verification_token {
  id      String   @id @default(cuid())
  email   String   @db.Text
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model reset_password_token {
  id      String   @id @default(cuid())
  email   String   @db.Text
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model lightnovel {
  id          String        @id @default(cuid())
  name        String        @db.Text
  other_names String[]      @default([])
  author      String?       @db.Text
  artist      String?       @default("")
  image       Json?         @db.Json
  summary     Json          @db.Json
  created_at  DateTime      @default(now())
  update_at   DateTime      @updatedAt
  deleted     Boolean       @default(false)
  status      ContentStatus @default(InProcess)
  note        Json?         @db.Json

  user_id              String              @db.Text
  translation_group_id String?             @db.Text
  volumes              lightnovel_volume[]
  rating               rating[]
  favorites            favorite[]
  categories           category[]

  user             user               @relation(fields: [user_id], references: [id])
  translationGroup translation_group? @relation(fields: [translation_group_id], references: [id])

  @@index([name])
}

model lightnovel_volume {
  id         String   @id @default(cuid())
  name       String   @db.Text
  created_at DateTime @default(now())
  update_at  DateTime @updatedAt
  deleted    Boolean  @default(false)
  image      Json?    @db.Json

  novel_id String               @db.Text
  chapters lightnovel_chapter[]

  novel lightnovel @relation(fields: [novel_id], references: [id], onDelete: Cascade)
}

model lightnovel_chapter {
  id         String    @id @default(cuid())
  name       String    @db.Text
  content    Json      @db.Json
  created_at DateTime  @default(now())
  update_at  DateTime  @updatedAt
  deleted    Boolean   @default(false)
  viewed     Int       @default(0)
  words      Int       @default(0)
  viewed_at  DateTime? @db.Date

  volume_id String    @db.Text
  comments  comment[]

  volume lightnovel_volume @relation(fields: [volume_id], references: [id], onDelete: Cascade)
}

//TODO: ANIME
model anime {
  id          String        @id @default(cuid())
  name        String        @db.Text
  created_at  DateTime      @default(now())
  update_at   DateTime      @updatedAt
  deleted     Boolean       @default(false)
  summary     Json          @db.Json
  status      ContentStatus @default(InProcess)
  note        Json?         @db.Json
  other_names String[]      @default([])

  translation_group_id String?        @db.Text
  user_id              String         @db.Text
  seasons              anime_season[]
  rating               rating[]
  favorites            favorite[]
  categories           category[]

  user             user               @relation(fields: [user_id], references: [id])
  translationGroup translation_group? @relation(fields: [translation_group_id], references: [id])

  @@index([name])
}

model anime_season {
  id                 String   @id @default(cuid())
  name               String   @db.Text
  created_at         DateTime @default(now())
  update_at          DateTime @updatedAt
  deleted            Boolean  @default(false)
  image              Json?    @db.Json
  musics             Json?    @db.Json
  studio             String   @db.Text
  broadcast_time     DateTime @db.Date
  broadcast_day      String   @db.Text
  aired              DateTime @db.Date
  number_of_episodes Int?     @db.Integer

  anime_id String          @db.Text
  episodes anime_episode[]

  anime anime @relation(fields: [anime_id], references: [id], onDelete: Cascade)
}

model anime_episode {
  id         String    @id @default(cuid())
  content    Json      @db.Json
  created_at DateTime  @default(now())
  update_at  DateTime  @updatedAt
  deleted    Boolean   @default(false)
  viewed     Int       @default(0)
  index      String    @db.Text
  viewed_at  DateTime? @db.Date
  thumbnail  Json?     @db.Json

  season_id String    @db.Text
  comments  comment[]

  season anime_season @relation(fields: [season_id], references: [id], onDelete: Cascade)
}

//TODO: MANGA
model manga {
  id                   String         @id @default(cuid())
  name                 String         @db.Text
  created_at           DateTime       @default(now())
  update_at            DateTime       @updatedAt
  deleted              Boolean        @default(false)
  image                Json?          @db.Json
  status               ContentStatus  @default(InProcess)
  user_id              String         @db.Text
  seasons              manga_season[]
  rating               rating[]
  note                 Json?          @db.Json
  summary              Json           @db.Json
  translation_group_id String?        @db.Text

  // favorites  Favorite[] @relation(fields: [favoriteIds], references: [id])
  // categories Category[] @relation(fields: [categoryIds], references: [id])
  favorites         favorite[]
  categories        category[]
  user              user               @relation(fields: [user_id], references: [id])
  translation_group translation_group? @relation(fields: [translation_group_id], references: [id])

  @@index([name])
}

model manga_season {
  id         String   @id @default(cuid())
  name       String   @db.Text
  image      Json?    @db.Json
  created_at DateTime @default(now())
  update_at  DateTime @updatedAt
  deleted    Boolean  @default(false)

  manga_id String          @db.Text
  chapters manga_chapter[]

  manga manga @relation(fields: [manga_id], references: [id], onDelete: Cascade)
}

model manga_chapter {
  id         String    @id @default(cuid())
  url        String[]
  created_at DateTime  @default(now())
  update_at  DateTime  @updatedAt
  deleted    Boolean   @default(false)
  viewed     Int       @default(0)
  index      String    @db.Text
  viewed_at  DateTime? @db.Date

  season_id String    @db.Text
  comments  comment[]

  season manga_season @relation(fields: [season_id], references: [id], onDelete: Cascade)
}

model category {
  id      String  @id @default(cuid())
  name    String  @unique
  deleted Boolean @default(false)

  mangas      manga[]
  animes      anime[]
  lightnovels lightnovel[]
}

model comment {
  id        String   @id @default(cuid())
  comment   String   @db.Text
  create_at DateTime @default(now())
  update_at DateTime @updatedAt
  deleted   Boolean  @default(false)

  user_id       String  @db.Text
  lightnovel_id String? @db.Text
  anime_id      String? @db.Text
  manga_id      String? @db.Text

  user       user                @relation(fields: [user_id], references: [id], onDelete: Cascade)
  lightnovel lightnovel_chapter? @relation(fields: [lightnovel_id], references: [id], onDelete: Cascade)
  anime      anime_episode?      @relation(fields: [anime_id], references: [id], onDelete: Cascade)
  manga      manga_chapter?      @relation(fields: [manga_id], references: [id], onDelete: Cascade)
}

model rating {
  id    String @id @default(cuid())
  score Int

  user_id       String
  lightnovel_id String? @db.Text
  anime_id      String? @db.Text
  manga_id      String? @db.Text

  lightnovel lightnovel? @relation(fields: [lightnovel_id], references: [id], onDelete: Cascade)
  anime      anime?      @relation(fields: [anime_id], references: [id], onDelete: Cascade)
  manga      manga?      @relation(fields: [manga_id], references: [id], onDelete: Cascade)
  user       user        @relation(fields: [user_id], references: [id])
}
